{"version":3,"file":"nhost-js.cjs.js","sources":["../src/nhost.ts","../src/index.ts"],"sourcesContent":["import { generateServiceUrl } from \"./\";\nimport {\n  type Client as AuthClient,\n  createAPIClient as createAuthClient,\n} from \"./auth\";\nimport {\n  attachAccessTokenMiddleware,\n  type ChainFunction,\n  sessionRefreshMiddleware,\n  updateSessionFromResponseMiddleware,\n} from \"./fetch\";\nimport {\n  createAPIClient as createFunctionsClient,\n  type Client as FunctionsClient,\n} from \"./functions\";\nimport {\n  createAPIClient as createGraphQLClient,\n  type Client as GraphQLClient,\n} from \"./graphql\";\nimport {\n  detectStorage,\n  refreshSession,\n  type Session,\n  SessionStorage,\n  type SessionStorageBackend,\n} from \"./session/\";\nimport {\n  createAPIClient as createStorageClient,\n  type Client as StorageClient,\n} from \"./storage\";\n\n/**\n * Main client class that provides unified access to all Nhost services.\n * This class serves as the central interface for interacting with Nhost's\n * authentication, storage, GraphQL, and serverless functions capabilities.\n */\nexport class NhostClient {\n  /**\n   * Authentication client providing methods for user sign-in, sign-up, and session management.\n   * Use this client to handle all authentication-related operations.\n   */\n  auth: AuthClient;\n\n  /**\n   * Storage client providing methods for file operations (upload, download, delete).\n   * Use this client to manage files in your Nhost storage.\n   */\n  storage: StorageClient;\n\n  /**\n   * GraphQL client providing methods for executing GraphQL operations against your Hasura backend.\n   * Use this client to query and mutate data in your database through GraphQL.\n   */\n  graphql: GraphQLClient;\n\n  /**\n   * Functions client providing methods for invoking serverless functions.\n   * Use this client to call your custom serverless functions deployed to Nhost.\n   */\n  functions: FunctionsClient;\n\n  /**\n   * Storage implementation used for persisting session information.\n   * This handles saving, retrieving, and managing authentication sessions across requests.\n   */\n  sessionStorage: SessionStorage;\n\n  /**\n   * Create a new Nhost client. This constructor is reserved for advanced use cases.\n   * For typical usage, use [createClient](#createclient) or [createServerClient](#createserverclient) instead.\n   *\n   * @param auth - Authentication client instance\n   * @param storage - Storage client instance\n   * @param graphql - GraphQL client instance\n   * @param functions - Functions client instance\n   * @param sessionStorage - Storage implementation for session persistence\n   */\n  constructor(\n    auth: AuthClient,\n    storage: StorageClient,\n    graphql: GraphQLClient,\n    functions: FunctionsClient,\n    sessionStorage: SessionStorage,\n  ) {\n    this.auth = auth;\n    this.storage = storage;\n    this.graphql = graphql;\n    this.functions = functions;\n    this.sessionStorage = sessionStorage;\n  }\n\n  /**\n   * Get the current session from storage.\n   * This method retrieves the authenticated user's session information if one exists.\n   *\n   * @returns The current session or null if no session exists\n   *\n   * @example\n   * ```ts\n   * const session = nhost.getUserSession();\n   * if (session) {\n   *   console.log('User is authenticated:', session.user.id);\n   * } else {\n   *   console.log('No active session');\n   * }\n   * ```\n   */\n  getUserSession(): Session | null {\n    return this.sessionStorage.get();\n  }\n\n  /**\n   * Refresh the session using the current refresh token\n   * in the storage and update the storage with the new session.\n   *\n   * This method can be used to proactively refresh tokens before they expire\n   * or to force a refresh when needed.\n   *\n   * @param marginSeconds - The number of seconds before the token expiration to refresh the session. If the token is still valid for this duration, it will not be refreshed. Set to 0 to force the refresh.\n   *\n   * @returns The new session or null if there is currently no session or if refresh fails\n   *\n   * @example\n   * ```ts\n   * // Refresh token if it's about to expire in the next 5 minutes\n   * const refreshedSession = await nhost.refreshSession(300);\n   *\n   * // Force refresh regardless of current token expiration\n   * const forcedRefresh = await nhost.refreshSession(0);\n   * ```\n   */\n  async refreshSession(marginSeconds = 60): Promise<Session | null> {\n    return refreshSession(this.auth, this.sessionStorage, marginSeconds);\n  }\n\n  /**\n   * Clear the session from storage.\n   *\n   * This method removes the current authentication session, effectively logging out the user.\n   * Note that this is a client-side operation and doesn't invalidate the refresh token on\n   * the server, which can be done with `nhost.auth.signOut({refreshToken: session.refreshTokenId})`.\n   * If the middle `updateSessionFromResponseMiddleware` is used, the session will be removed\n   * from the storage automatically and calling this method is not necessary.\n   *\n   * @example\n   * ```ts\n   * // Log out the user\n   * nhost.clearSession();\n   * ```\n   */\n  clearSession(): void {\n    this.sessionStorage.remove();\n  }\n}\n\n/**\n * Configuration options for creating an Nhost client\n */\nexport interface NhostClientOptions {\n  /**\n   * Nhost project subdomain (e.g., 'abcdefgh'). Used to construct the base URL for services for the Nhost cloud.\n   */\n  subdomain?: string;\n\n  /**\n   * Nhost region (e.g., 'eu-central-1'). Used to construct the base URL for services for the Nhost cloud.\n   */\n  region?: string;\n\n  /**\n   * Complete base URL for the auth service (overrides subdomain/region)\n   */\n  authUrl?: string;\n\n  /**\n   * Complete base URL for the storage service (overrides subdomain/region)\n   */\n  storageUrl?: string;\n\n  /**\n   * Complete base URL for the GraphQL service (overrides subdomain/region)\n   */\n  graphqlUrl?: string;\n\n  /**\n   * Complete base URL for the functions service (overrides subdomain/region)\n   */\n  functionsUrl?: string;\n\n  /**\n   * Storage backend to use for session persistence. If not provided, the SDK will\n   * default to localStorage in the browser or memory in other environments.\n   */\n  storage?: SessionStorageBackend;\n}\n\n/**\n * Creates and configures a new Nhost client instance optimized for client-side usage.\n *\n * This helper method instantiates a fully configured Nhost client by:\n * - Instantiating the various service clients (auth, storage, functions and graphql)\n * - Auto-detecting and configuring an appropriate session storage (localStorage in browsers, memory otherwise)\n * - Setting up a sophisticated middleware chain for seamless authentication management:\n *   - Automatically refreshing tokens before they expire\n *   - Attaching authorization tokens to all service requests\n *   - Updating the session storage when new tokens are received\n *\n * This method includes automatic session refresh middleware, making it ideal for\n * client-side applications where long-lived sessions are expected.\n *\n * @param options - Configuration options for the client\n * @returns A configured Nhost client\n *\n * @example\n * ```ts\n * // Create client using Nhost cloud default URLs\n * const nhost = createClient({\n *   subdomain: 'abcdefgh',\n *   region: 'eu-central-1'\n * });\n *\n * // Create client with custom service URLs\n * const customNhost = createClient({\n *   authUrl: 'https://auth.example.com',\n *   storageUrl: 'https://storage.example.com',\n *   graphqlUrl: 'https://graphql.example.com',\n *   functionsUrl: 'https://functions.example.com'\n * });\n *\n * // Create client using cookies for storing the session\n * import { CookieStorage } from \"@nhost/nhost-js/session\";\n *\n * const nhost = createClient({\n *   subdomain: 'abcdefgh',\n *   region: 'eu-central-1',\n *   storage: new CookieStorage({\n *      secure: import.meta.env.ENVIRONMENT === 'production',\n *   })\n * });\n * ```\n */\nexport function createClient(options: NhostClientOptions = {}): NhostClient {\n  const {\n    subdomain,\n    region,\n    authUrl,\n    storageUrl,\n    graphqlUrl,\n    functionsUrl,\n    storage = detectStorage(),\n  } = options;\n\n  const sessionStorage = new SessionStorage(storage);\n\n  // Determine base URLs for each service\n  const authBaseUrl = generateServiceUrl(\"auth\", subdomain, region, authUrl);\n  const storageBaseUrl = generateServiceUrl(\n    \"storage\",\n    subdomain,\n    region,\n    storageUrl,\n  );\n  const graphqlBaseUrl = generateServiceUrl(\n    \"graphql\",\n    subdomain,\n    region,\n    graphqlUrl,\n  );\n\n  const functionsBaseUrl = generateServiceUrl(\n    \"functions\",\n    subdomain,\n    region,\n    functionsUrl,\n  );\n\n  // Create auth client\n  const auth = createAuthClient(authBaseUrl);\n\n  const mwChain = getMiddlewareChain(auth, sessionStorage, true);\n\n  for (const mw of mwChain) {\n    auth.pushChainFunction(mw);\n  }\n\n  // Create storage and graphql clients with the refresh and attach token middlewares\n  const storageClient = createStorageClient(storageBaseUrl, mwChain);\n  const graphqlClient = createGraphQLClient(graphqlBaseUrl, mwChain);\n  const functionsClient = createFunctionsClient(functionsBaseUrl, mwChain);\n\n  // Return an initialized NhostClient\n  return new NhostClient(\n    auth,\n    storageClient,\n    graphqlClient,\n    functionsClient,\n    sessionStorage,\n  );\n}\n\nexport interface NhostServerClientOptions extends NhostClientOptions {\n  /**\n   * Storage backend to use for session persistence in server environments.\n   * Unlike the base options, this field is required for server-side usage\n   * as the SDK cannot auto-detect an appropriate storage mechanism.\n   */\n  storage: SessionStorageBackend;\n}\n\n/**\n * Creates and configures a new Nhost client instance optimized for server-side usage.\n *\n * This helper method instantiates a fully configured Nhost client specifically designed for:\n * - Server components (in frameworks like Next.js or Remix)\n * - API routes and middleware\n * - Backend services and server-side rendering contexts\n *\n * Key differences from the standard client:\n * - Requires explicit storage implementation (must be provided)\n * - Disables automatic session refresh middleware (to prevent race conditions in server contexts)\n * - Still attaches authorization tokens and updates session storage from responses\n *\n * The server client is ideal for short-lived request contexts where session tokens\n * are passed in (like cookie-based authentication flows) and automatic refresh\n * mechanisms could cause issues with concurrent requests.\n *\n * @param options - Configuration options for the server client (requires storage implementation)\n * @returns A configured Nhost client optimized for server-side usage\n *\n * @example\n * ```ts\n * // Example with cookie storage for Next.js API route or server component\n * import { cookies } from 'next/headers';\n *\n * const nhost = createServerClient({\n *   region: process.env[\"NHOST_REGION\"] || \"local\",\n *   subdomain: process.env[\"NHOST_SUBDOMAIN\"] || \"local\",\n *   storage: {\n *     // storage compatible with Next.js server components\n *     get: (): Session | null => {\n *       const s = cookieStore.get(key)?.value || null;\n *       if (!s) {\n *         return null;\n *       }\n *       const session = JSON.parse(s) as Session;\n *       return session;\n *     },\n *     set: (value: Session) => {\n *       cookieStore.set(key, JSON.stringify(value));\n *     },\n *     remove: () => {\n *       cookieStore.delete(key);\n *     },\n *   },\n * });\n *\n * // Example with cookie storage for Next.js middleware\n * const nhost = createServerClient({\n *   region: process.env[\"NHOST_REGION\"] || \"local\",\n *   subdomain: process.env[\"NHOST_SUBDOMAIN\"] || \"local\",\n *   storage: {\n *     // storage compatible with Next.js middleware\n *     get: (): Session | null => {\n *       const raw = request.cookies.get(key)?.value || null;\n *       if (!raw) {\n *         return null;\n *       }\n *       const session = JSON.parse(raw) as Session;\n *       return session;\n *     },\n *     set: (value: Session) => {\n *       response.cookies.set({\n *         name: key,\n *         value: JSON.stringify(value),\n *         path: \"/\",\n *         httpOnly: false, //if set to true we can't access it in the client\n *         secure: process.env.NODE_ENV === \"production\",\n *         sameSite: \"lax\",\n *         maxAge: 60 * 60 * 24 * 30, // 30 days in seconds\n *       });\n *     },\n *     remove: () => {\n *       response.cookies.delete(key);\n *     },\n *   },\n * });\n *\n * // Example for express reading session from a cookie\n *\n * import express, { Request, Response } from \"express\";\n * import cookieParser from \"cookie-parser\";\n *\n * app.use(cookieParser());\n *\n * const nhostClientFromCookies = (req: Request) => {\n *   return createServerClient({\n *     subdomain: \"local\",\n *     region: \"local\",\n *     storage: {\n *       get: (): Session | null => {\n *         const s = req.cookies.nhostSession || null;\n *         if (!s) {\n *           return null;\n *         }\n *         const session = JSON.parse(s) as Session;\n *         return session;\n *       },\n *       set: (_value: Session) => {\n *         throw new Error(\"It is easier to handle the session in the client\");\n *       },\n *       remove: () => {\n *         throw new Error(\"It is easier to handle the session in the client\");\n *       },\n *     },\n *   });\n * };\n * ```\n */\nexport function createServerClient(\n  options: NhostServerClientOptions,\n): NhostClient {\n  const {\n    subdomain,\n    region,\n    authUrl,\n    storageUrl,\n    graphqlUrl,\n    functionsUrl,\n    storage,\n  } = options;\n  const sessionStorage = new SessionStorage(storage);\n\n  // Determine base URLs for each service\n  const authBaseUrl = generateServiceUrl(\"auth\", subdomain, region, authUrl);\n  const storageBaseUrl = generateServiceUrl(\n    \"storage\",\n    subdomain,\n    region,\n    storageUrl,\n  );\n  const graphqlBaseUrl = generateServiceUrl(\n    \"graphql\",\n    subdomain,\n    region,\n    graphqlUrl,\n  );\n\n  const functionsBaseUrl = generateServiceUrl(\n    \"functions\",\n    subdomain,\n    region,\n    functionsUrl,\n  );\n\n  // Create auth client\n  const auth = createAuthClient(authBaseUrl);\n\n  const mwChain = getMiddlewareChain(auth, sessionStorage, false);\n\n  for (const mw of mwChain) {\n    auth.pushChainFunction(mw);\n  }\n\n  // Create storage and graphql clients with the refresh and attach token middlewares\n  const storageClient = createStorageClient(storageBaseUrl, mwChain);\n  const graphqlClient = createGraphQLClient(graphqlBaseUrl, mwChain);\n  const functionsClient = createFunctionsClient(functionsBaseUrl, mwChain);\n\n  // Return an initialized NhostClient\n  return new NhostClient(\n    auth,\n    storageClient,\n    graphqlClient,\n    functionsClient,\n    sessionStorage,\n  );\n}\n\nfunction getMiddlewareChain(\n  auth: AuthClient,\n  storage: SessionStorage,\n  autoRefresh: boolean,\n): ChainFunction[] {\n  const mwChain = [\n    updateSessionFromResponseMiddleware(storage),\n    attachAccessTokenMiddleware(storage),\n  ];\n\n  if (autoRefresh) {\n    mwChain.unshift(sessionRefreshMiddleware(auth, storage));\n  }\n\n  return mwChain;\n}\n","/**\n * Main entry point for the Nhost JavaScript SDK.\n *\n * This package provides a unified client for interacting with Nhost services:\n * - Authentication\n * - Storage\n * - GraphQL\n * - Functions\n *\n * ## Import\n *\n * ```ts\n * import { createClient } from \"@nhost/nhost-js\";\n * ```\n *\n * ## Usage\n *\n * Create a client instance to interact with Nhost services:\n *\n * {@includeCode ./__tests__/docstrings.test.ts:11-115}\n *\n * @packageDocumentation\n */\n\nexport {\n  createClient,\n  createServerClient,\n  type NhostClient,\n  type NhostClientOptions,\n  type NhostServerClientOptions,\n} from \"./nhost\";\n\n/**\n * Generates a base URL for a Nhost service based on configuration\n *\n * @param serviceType - Type of service (auth, storage, graphql, functions)\n * @param subdomain - Nhost project subdomain\n * @param region - Nhost region\n * @param customUrl - Custom URL override if provided\n * @returns The base URL for the service\n */\nexport const generateServiceUrl = (\n  serviceType: \"auth\" | \"storage\" | \"graphql\" | \"functions\",\n  subdomain?: string,\n  region?: string,\n  customUrl?: string,\n): string => {\n  if (customUrl) {\n    return customUrl;\n  } else if (subdomain && region) {\n    return `https://${subdomain}.${serviceType}.${region}.nhost.run/v1`;\n  } else {\n    return `https://local.${serviceType}.local.nhost.run/v1`;\n  }\n};\n"],"names":["NhostClient","auth","storage","graphql","functions","sessionStorage","constructor","this","getUserSession","get","refreshSession","marginSeconds","clearSession","remove","getMiddlewareChain","autoRefresh","mwChain","updateSessionFromResponseMiddleware","attachAccessTokenMiddleware","unshift","sessionRefreshMiddleware","generateServiceUrl","serviceType","subdomain","region","customUrl","options","authUrl","storageUrl","graphqlUrl","functionsUrl","detectStorage","SessionStorage","authBaseUrl","storageBaseUrl","graphqlBaseUrl","functionsBaseUrl","createAuthClient","mw","pushChainFunction","storageClient","createStorageClient","graphqlClient","createGraphQLClient","functionsClient","createFunctionsClient"],"mappings":"uWAoCO,MAAMA,EAKXC,KAMAC,QAMAC,QAMAC,UAMAC,eAYA,WAAAC,CACEL,EACAC,EACAC,EACAC,EACAC,GAEAE,KAAKN,KAAOA,EACZM,KAAKL,QAAUA,EACfK,KAAKJ,QAAUA,EACfI,KAAKH,UAAYA,EACjBG,KAAKF,eAAiBA,CACxB,CAkBA,cAAAG,GACE,OAAOD,KAAKF,eAAeI,KAC7B,CAsBA,oBAAMC,CAAeC,EAAgB,IACnC,OAAOD,EAAAA,eAAeH,KAAKN,KAAMM,KAAKF,eAAgBM,EACxD,CAiBA,YAAAC,GACEL,KAAKF,eAAeQ,QACtB,EAsUF,SAASC,EACPb,EACAC,EACAa,GAEA,MAAMC,EAAU,CACdC,EAAAA,oCAAoCf,GACpCgB,EAAAA,4BAA4BhB,IAO9B,OAJIa,GACFC,EAAQG,QAAQC,EAAAA,yBAAyBnB,EAAMC,IAG1Cc,CACT,CCpcO,MAAMK,EAAqB,CAChCC,EACAC,EACAC,EACAC,IAEIA,IAEOF,GAAaC,EACf,WAAWD,KAAaD,KAAeE,iBAEvC,iBAAiBF,6CD6LrB,SAAsBI,EAA8B,IACzD,MAAMH,UACJA,EAAAC,OACAA,EAAAG,QACAA,EAAAC,WACAA,EAAAC,WACAA,EAAAC,aACAA,EAAA5B,QACAA,EAAU6B,EAAAA,iBACRL,EAEErB,EAAiB,IAAI2B,EAAAA,eAAe9B,GAGpC+B,EAAcZ,EAAmB,OAAQE,EAAWC,EAAQG,GAC5DO,EAAiBb,EACrB,UACAE,EACAC,EACAI,GAEIO,EAAiBd,EACrB,UACAE,EACAC,EACAK,GAGIO,EAAmBf,EACvB,YACAE,EACAC,EACAM,GAII7B,EAAOoC,EAAAA,gBAAiBJ,GAExBjB,EAAUF,EAAmBb,EAAMI,GAAgB,GAEzD,IAAA,MAAWiC,KAAMtB,EACff,EAAKsC,kBAAkBD,GAIzB,MAAME,EAAgBC,EAAAA,gBAAoBP,EAAgBlB,GACpD0B,EAAgBC,EAAAA,gBAAoBR,EAAgBnB,GACpD4B,EAAkBC,EAAAA,gBAAsBT,EAAkBpB,GAGhE,OAAO,IAAIhB,EACTC,EACAuC,EACAE,EACAE,EACAvC,EAEJ,6BAwHO,SACLqB,GAEA,MAAMH,UACJA,EAAAC,OACAA,EAAAG,QACAA,EAAAC,WACAA,EAAAC,WACAA,EAAAC,aACAA,EAAA5B,QACAA,GACEwB,EACErB,EAAiB,IAAI2B,EAAAA,eAAe9B,GAGpC+B,EAAcZ,EAAmB,OAAQE,EAAWC,EAAQG,GAC5DO,EAAiBb,EACrB,UACAE,EACAC,EACAI,GAEIO,EAAiBd,EACrB,UACAE,EACAC,EACAK,GAGIO,EAAmBf,EACvB,YACAE,EACAC,EACAM,GAII7B,EAAOoC,EAAAA,gBAAiBJ,GAExBjB,EAAUF,EAAmBb,EAAMI,GAAgB,GAEzD,IAAA,MAAWiC,KAAMtB,EACff,EAAKsC,kBAAkBD,GAIzB,MAAME,EAAgBC,EAAAA,gBAAoBP,EAAgBlB,GACpD0B,EAAgBC,EAAAA,gBAAoBR,EAAgBnB,GACpD4B,EAAkBC,EAAAA,gBAAsBT,EAAkBpB,GAGhE,OAAO,IAAIhB,EACTC,EACAuC,EACAE,EACAE,EACAvC,EAEJ"}